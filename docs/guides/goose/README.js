Ext.data.JsonP.goose({"guide":"<h1>Goose: MongoDB ORM Organizational Pattern</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/goose-section-1'>Basic Example</a></li>\n<li><a href='#!/guide/goose-section-2'>Accessing ORM Anywhere</a></li>\n<li><a href='#!/guide/goose-section-3'>Schemas</a></li>\n<li><a href='#!/guide/goose-section-4'>TODO: Global Plugins</a></li>\n<li><a href='#!/guide/goose-section-5'>TODO: Middleware</a></li>\n</ol>\n</div>\n\n<p>NGN already provides direct access to MongoDB using <a href=\"#!/api/NGN.datasource.MongoDB\" rel=\"NGN.datasource.MongoDB\" class=\"docClass\">NGN.datasource.MongoDB</a>,\nbut many applications use a specific data structure that requires validation,\nreferential integrity, pre/post-conditions, and other standard data processing.\nIn these situations, an ORM is typically used to reduce mundane and repetitive\ntasks on data objects.</p>\n\n<p>Goose wraps <a href=\"http://mongoosejs.com\">Mongoose</a>, a popular ORM module,\nand extends it to support code organization, schema isolation, etc.</p>\n\n<p>For example, each schema is stored in a single <code>.js</code> file within a schema directory,\ncomplete with some dependency management. Goose creates an easy to use\ncollection of schemas and makes them available throughout an application.</p>\n\n<p>Organizing files this way may be more familiar for those used to working\nwith RDBMS platforms like MySQL, SQL Server, Oracle, etc. Identifying a\nschema is a matter of looking at the directory. Since each file is named\naccording to the schema name, it is similar to looking through a tree of\ndatabase tables.</p>\n\n<p>Additionally, Goose schemas can be better documented and included in custom\nAPI's created with NGN.</p>\n\n<h2 id='goose-section-1'>Basic Example</h2>\n\n<p>Suppose schemas called <code>BlogPost.js</code> and <code>Comment.js</code> exist in <code>/path/to/schemas</code>.</p>\n\n<p><strong>/path/to/schemas/BlogPost.js</strong></p>\n\n<pre><code>var Schema      = require('mongoose').Schema,\n    Comment     = require('./Comment');\n\nmodule.exports = new Schema({\n\n    id        : ObjectId,\n    author    : Number,\n    title     : String,\n    body      : String,\n    buf       : Buffer,\n    date      : Date,\n    comments  : [Comment],\n    meta      : {\n                    votes : Number,\n                    favs  : Number\n              }\n});\n</code></pre>\n\n<p><strong>/path/to/schemas/Comment.js</strong></p>\n\n<pre><code>var Schema          = require('mongoose').Schema,\n    number          = require('./plugins/comment');\n\nmodule.exports = new Schema({\n    name:   { type: String, 'default': 'hahaha' },\n    age:    { type: Number, min: 18, index: true },\n    bio:    { type: String, match: /[a-z]/ },\n    msg:    String,\n    date:   { type: Date, 'default': <a href=\"#!/api/Date-static-method-now\" rel=\"Date-static-method-now\" class=\"docClass\">Date.now</a> },\n    buff:   Buffer\n});\n\n//Utilize a plugin\nComment.plugin(number);\n\n// Middleware\nComment.pre('save', function (next) {\n  notify(this.get('email'));\n  next();\n});\n</code></pre>\n\n<p><strong>app.js</strong></p>\n\n<pre><code>require('ngn');\n\n<a href=\"#!/api/NGN-method-application\" rel=\"NGN-method-application\" class=\"docClass\">NGN.application</a>(function(){\n\n    // Create the MongoDB Connection\n    var database = new <a href=\"#!/api/NGN.datasource.MongoDB\" rel=\"NGN.datasource.MongoDB\" class=\"docClass\">NGN.datasource.MongoDB</a>({\n        id: 'mongo_orm',\n        host:       'mongo.domain.com',\n        port:       30007,\n        database:   'my_db',\n        username:   'user',\n        password:   'password'\n    });\n\n    // Add Goose ORM\n    var ORM = new <a href=\"#!/api/NGNX.datasource.orm.Goose\" rel=\"NGNX.datasource.orm.Goose\" class=\"docClass\">NGNX.datasource.orm.Goose</a>({\n        schemas:    '/path/to/schemas',\n        connection: 'mongo_orm'     // Could also be connection: database\n    });\n\n    // Create a blog post\n    var blog = new ORM.schema.BlogPost();\n    blog.author = 'John Doe';\n    blog.title  = 'Some Headline';\n    blog.body   = 'Anonymous man publishes this mysterious writing to the web.';\n\n    // Add a comment to the post\n    var comment = new ORM.schema.Comment();\n    comment.msg = 'Anonymous comments add to the mystery.';\n\n    blog.comments.push(comment);\n\n    // Save to Mongo.\n    blog.save(function(){\n        console.log('Post saved');\n\n        // Query Mongo for all blog posts.\n        ORM.schema.BlogPost.find({},function( err, docs ) {\n            if ( err ) throw err;\n            console.log(docs);\n        });\n    });\n\n});\n</code></pre>\n\n<p>The code above isn't terribly practical, but it does illustrate several features.\nNotice the Goose ORM object is capable of identifying a data source by name when\nused within an NGN application. Therefore, the ORM is accessible throughout the\nentire application.</p>\n\n<h2 id='goose-section-2'>Accessing ORM Anywhere</h2>\n\n<p>NGNA is a \"sugar\" shortcut to <code><a href=\"#!/api/NGN-property-app\" rel=\"NGN-property-app\" class=\"docClass\">NGN.app</a></code>. The <a href=\"#!/api/NGN.app.Application-method-getORM\" rel=\"NGN.app.Application-method-getORM\" class=\"docClass\">getORM()</a> method of <a href=\"#!/api/NGN-property-app\" rel=\"NGN-property-app\" class=\"docClass\">NGN.app</a> provides direct access\nto the ORM object.</p>\n\n<p>Continuing with the example above, ORM can be used anywhere. If the application provides a REST\nAPI using <a href=\"#!/api/NGN.web.API\" rel=\"NGN.web.API\" class=\"docClass\">NGN.web.API</a>, it may make sense to create, read, update, or delete (CRUD) objects in\nthe database using the API as an interface.</p>\n\n<p><strong>example routes/root.js</strong></p>\n\n<pre><code>'/blog/port/:id': {\n    get: function(req,res){\n        var orm     = NGNA.getORM('mongo_orm').schemas;\n\n        // Find a specific post.\n        orm.BlogPost.findOne({id:req.qs.id},function(err,doc){\n            if (doc)\n                res.json(doc);\n            else\n                res.send(404); // Not found\n        }).\n    }\n}\n</code></pre>\n\n<p>The example above would receive the REST request, run a query against all <code>BlogPost</code>\ncollections in the MongoDB store, and return the results. If the corresponding blog post is found,\nthe REST API responded with <code>doc</code> (JSON). If it is not found, a <code>404</code> response\nis sent back.</p>\n\n<p>Similarly, creating a blog post via REST would be implemented with code like:</p>\n\n<pre><code>'/blog/post': {\n    post: function(req,res){\n        var orm = NGNA.getORM('mongo_orm').schemas;\n\n        // Create new BlogPost ORM object.\n        var blog = new orm.BlogPost();\n\n        // Populate with data\n        blog.author = 'John Doe';\n        blog.title  = req.form.title;\n        blog.body   = req.form.body;\n\n        // Save to MongoDB\n        blog.save(function(err){\n            if (err)\n                res.send(500,err);\n            else\n                res.send(201); // Tell the requestor the blog post was created.\n        });\n    }\n}\n</code></pre>\n\n<p>The example above would respond to a <code>POST</code> request submitted to <code>http://domain.com/blog/post</code> with a JSON body similar to:</p>\n\n<pre><code>{\n    \"title\": \"I love node.js!\",\n    \"body\":  \"It's pretty easy to use!\"\n}\n</code></pre>\n\n<p><em>The example assumes</em> <a href=\"#!/api/NGNX.web.ApiRequestHelper\" rel=\"NGNX.web.ApiRequestHelper\" class=\"docClass\">NGNX.web.ApiRequestHelper</a> <em>is supplied to</em> <a href=\"#!/api/NGN.web.API\" rel=\"NGN.web.API\" class=\"docClass\">NGN.web.API</a> <em>on creation.</em></p>\n\n<p>The JSON body is received by the API. A new <code>BlogPost</code>  is created, populated using the attributes\nfrom the JSON body, then saved. Upon completion, a response is sent with either an error or a <code>201 (Created)</code>.</p>\n\n<h2 id='goose-section-3'>Schemas</h2>\n\n<p>Schemas are an important concept in MongoDB ORM. Each schema is similar to a schema/table in a more\ntraditional RDBMS environment.</p>\n\n<p>TODO: Complete This</p>\n\n<h2 id='goose-section-4'>TODO: Global Plugins</h2>\n\n<p><a href=\"http://mongoosejs.com/docs/plugins.html\">Mongoose</a> supports plugins</p>\n\n<h2 id='goose-section-5'>TODO: Middleware</h2>\n","title":"Goose ORM for MongoDB"});