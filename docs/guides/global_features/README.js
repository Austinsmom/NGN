Ext.data.JsonP.global_features({"guide":"<h1>Using NGN Global Features</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/global_features-section-1'>Data Sources</a></li>\n<li><a href='#!/guide/global_features-section-2'>Application Service Bus</a></li>\n<li><a href='#!/guide/global_features-section-3'>Email Servers</a></li>\n<li><a href='#!/guide/global_features-section-4'>Configuration</a></li>\n<li><a href='#!/guide/global_features-section-5'>Service Sources</a></li>\n</ol>\n</div>\n\n<p>NGN provides several built-in features and is capable of being extended to support many more.</p>\n\n<p>By adding <code>require('ngn')</code> to the main node.js executable, all of the features found in this guide are made available\nto any file in the application, via a global reference called <code>NGN</code>. This guide provides explanations of the features\nexposed to applications in this reference. For more information about how this reference/namespace is created, please see\nthe <a href=\"#!/guide/ngn_namespace\">NGN Namespace Guide</a>. Additionally, NGN creates a second empty global called\n<code>application</code> for encapsulating custom application-specific objects/references/etc. More information can be found\nin the <a href=\"#!/guide/application_scope\">NGN Application Guide</a>.</p>\n\n<h2 id='global_features-section-1'>Data Sources</h2>\n\n<p>Data sources are commonly used throughout applications.</p>\n\n<h2 id='global_features-section-2'>Application Service Bus</h2>\n\n<p>NGN supports an Application Service Bus via the BUS attribute. An Application Service Bus is\nconceptually similar to an <a href=\"http://en.wikipedia.org/wiki/Enterprise_service_bus\">enterprise service bus</a>, except it only\ninteracts with other elements of the application.</p>\n\n<p>When NGN is loaded, <code>BUS</code> is created as a basic EventEmitter. It is possible to predefine application-wide listeners\nwhen NGN is required. For example:</p>\n\n<p><strong>main.js</strong></p>\n\n<pre><code>require('ngn');\n\nNGN.BUS.on('myevent',function(data){\n    console.log('My Event Says: '+data);\n});\n\nrequire('applogic.js');\n</code></pre>\n\n<p><strong>applogic.js</strong></p>\n\n<pre><code>app.get('/display/:message',function(req,res){\n    NGN.BUS.emit('myevent',req.params.message);\n});\n</code></pre>\n\n<p>When someone visits <code>http://mydomain.com/display/Hello</code>, the console will display <code>My Event Says: Hello</code>.</p>\n\n<p>The Application Service Bus concept is loosely incorporated into the framework so as to be as flexible as possible.\nIt can be used for just about anything, including hooking into an Enterprise Service Bus like <a href=\"http://hook.io\">hook.io</a>,\nacting as a global controller, or pushing a broadcast over a web socket.</p>\n\n<h2 id='global_features-section-3'>Email Servers</h2>\n\n<p>NGN stores server connections, such as <code>smtp</code> connections or connections to web API's like Sendgrid.</p>\n\n<h2 id='global_features-section-4'>Configuration</h2>\n\n<p>There are many occassions where properties need to be shared across the application. For example, access tokens to the Facebook API\nor the API ket for stripe. The configuration property handles this.</p>\n\n<h2 id='global_features-section-5'>Service Sources</h2>\n\n<p>Many applications rely on third party SaSS services and API's. These can be stored globally for reuse.</p>\n","title":"Global Features"});