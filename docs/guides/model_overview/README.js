Ext.data.JsonP.model_overview({"guide":"<h1>Models</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/model_overview-section-1'>Using Models</a></li>\n<li><a href='#!/guide/model_overview-section-2'>Custom Attributes</a></li>\n<li><a href='#!/guide/model_overview-section-3'>Change Management</a></li>\n<li><a href='#!/guide/model_overview-section-4'>Data Validation</a></li>\n<li><a href='#!/guide/model_overview-section-5'>Associations: Related Models</a></li>\n<li><a href='#!/guide/model_overview-section-6'>Models &amp; Data Storage</a></li>\n</ol>\n</div>\n\n<p>NGN uses models to describe different logical elements of an application. For example, most applications\nare designed for use by people. The <code>Person</code> model represents a human being. There may be many kinds of\npeople using the application, each with the same attributes but unique values. A simple example is first and\nlast name. Models are typically persisted in a data store, and the value of their attributes is what constitutes\nthe data records saved.</p>\n\n<h2 id='model_overview-section-1'>Using Models</h2>\n\n<p>The core models, found in the NGN.model package, represent individual pieces of the application. For example,\n<a href=\"#!/api/NGN.model.Person\" rel=\"NGN.model.Person\" class=\"docClass\">NGN.model.Person</a> represents a single individual. NGN.model.Group represents a single group, though that\ngroup may consist of multiple people.</p>\n\n<p>Creating a model is done the same way a normal class is created, i.e.</p>\n\n<pre><code>var person = new <a href=\"#!/api/NGN.model.Person\" rel=\"NGN.model.Person\" class=\"docClass\">NGN.model.Person</a>();\n</code></pre>\n\n<p>This single line creates a model representation of a person. If the application needs to represent John Doe,\nwho was born on January 4th, 1975, simply specify the values:</p>\n\n<pre><code>person.firstName = 'John';\nperson.lastName = 'Doe';\nperson.dob = new Date(1975,1,4);\n</code></pre>\n\n<p>The core models provided by NGN are designed to cover the most common needs. In the case of a person, applications\nmay alter their content based on a specific dimension, like age. The <code>Person</code> model automatically calculates\nthe age of a person on the fly, based on their date of birth. If the application is designed only for people\nage 18+, the following would work:</p>\n\n<pre><code>if (person.age &gt;= 18)\n    console.log('Allowed');\nelse\n    console.log('Not Allowed');\n</code></pre>\n\n<p>Each model is designed to offer as much flexibility as possible, with a healthy set of helper attributes/methods\nfor managing/using the model.</p>\n\n<h2 id='model_overview-section-2'>Custom Attributes</h2>\n\n<p>For applications that require attributes that are not a part of the model, or for specific instances\nwhere an extra attribute is required, it is possible to simply add them to the model.</p>\n\n<pre><code>var person = new <a href=\"#!/api/NGN.model.Person\" rel=\"NGN.model.Person\" class=\"docClass\">NGN.model.Person</a>();\n\nperson.firstName = 'John';\nperson.lastName = 'Doe';\nperson.dob = new Date(1975,1,4);\n\nperson.myCustomAttribute = 'Custom Value';\n</code></pre>\n\n<p>This is useful for small ad-hoc needs. However; some applications may require custom attributes defined for\nevery person, perhaps with default values. These applications may also require custom helper methods or more\ncomplex validation. For these scenarios, it is best to create a custom model library. This is done exactly\nthe same way any other NGN class is extended. Existing core models can be extended, or completely new models\ncan be created by extending the private <a href=\"#!/api/NGN.model.Model\" rel=\"NGN.model.Model\" class=\"docClass\">NGN.model.Model</a> class.</p>\n\n<p>Keep in mind, models are a little different from other classes. They are the only classes that provide\nchange management functionality.</p>\n\n<h2 id='model_overview-section-3'>Change Management</h2>\n\n<p>One of the powerful features NGN models provide are a capability to listen for and intercept change events.\nListening for a change involves using the #on method of a model. For example,</p>\n\n<pre><code>person.on('change',function(changeObject){\n    console.log(changeObject);\n});\n</code></pre>\n\n<p>The code above will dump a JSON object to the console. A change object contains the following data:</p>\n\n<pre><code>{\n    property:   'name',                             // Name of the attribute that changed.\n    type:       'create|update|delete',             // The type of change\n    value:      &lt;any&gt;,                              // The latest value. Only exists when type = create/update.\n    oldValue:   &lt;any&gt;,                              // Provides the prior value. Exists only when type = update/delete.\n    array:      {                                   // This object exists only for attributes that are an array.\n                    index:      &lt;Number&gt;,           // The index of the array that changed.\n                    action:     'add|edit|delete',  // What action was performed to the index element\n                    value:      &lt;any&gt;,              // The latest value of the array index. Only exists when action = add/edit.\n                    oldValue:   &lt;any&gt;               // The prior value of the array index. Only exists when action = edit/delete.\n                }\n}\n</code></pre>\n\n<p>Using th example, if the person's name is really Jane Doe, then setting <code>person.firstName = \"Jane\";</code>\nwould fire the change event, passing the following changeObject:</p>\n\n<pre><code>{\n    property:   'firstName',\n    type:       'update',\n    oldValue:   'John',\n    value:      'Jane'\n}\n</code></pre>\n\n<p>Additionally, models automatically create an event for each property. In other words, it is possible\nto listen for a specific event:</p>\n\n<pre><code>person.on('changeFirsName', function(changeObject){\n    console.log('First name changed from '+changeObject.oldValue+' to '+changeValue.value);\n});\n</code></pre>\n\n<p>The generated events are created by appending the word <code>change</code> to the capitalized attribute name, i.e.\n<code>change</code>+<code>FirsName</code>.</p>\n\n<p>Additionally, a <code>beforeChange</code> event exists. Like <code>change</code>, a unique <code>beforeChange</code> event is also created\nfor each data attribute of the model. The <code>beforeChange</code> event works in the same manner. It can be overridden\nto provide event interception. This may be useful for things like data validation, but there are alternative\nand simpler ways to accomplish these types of tasks (explained later in this guide).</p>\n\n<p>The change management feature also provides a full change log, accessible on all models by executing\nthe <code>getChangeLog()</code> method. This returns an ordered array of change objects, allowing a complete trace\nof how the object has changed since it was saved.</p>\n\n<p>There is also a <code>rollback()</code> method, which is essentially a big <em>undo</em> command. By default, this reverts the\nmodel to it's prior state by reversing the last change. The method accepts a number, allowing applications\nto undo more than one change at a time. To clear changes, a <code>-1</code> should be passed, as defined in the documentation.</p>\n\n<p>There is no <em>redo</em> method at this time, so all rollbacks should be done with caution.</p>\n\n<h3>Enabling Change Management</h3>\n\n<p>Change management is built on <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies\">direct proxies</a> and <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps\">weak maps</a>,\nwhich are part of the ECMAScript 6 proposed\nspecification. V8, and therefore node.js, provides experimental support for this through the <code>--harmony</code>\nflag when launching an application. For example, <code>node --harmony myapp.js</code>.</p>\n\n<p>While this is still technically experimental/draft according to TC39 (ES6 Committee), there are already\nimplementations in Google V8 (node, Chrome) and Spidermonkey (Mozilla Firefox) that are used in other\npopular node modules. NGN uses the fine work of <a href=\"https://github.com/tvcutsem/harmony-reflect/\">harmony-reflect</a> to assist\nwith the implementation.</p>\n\n<p>In testing, 90% of the use cases for change management are handled exceptionally well.\nHowever; with any experimental code, there are some <em>gotchas</em>. For most applications, the workarounds\nare negligible, if necessary at all.</p>\n\n<p><strong>Array Gotchas:</strong> No Known!</p>\n\n<p>NGN masks the complexities of managing change of an array by providing a wrapper.</p>\n\n<p><strong>RegExp Gotchas:</strong> No Known!</p>\n\n<p>Regular expressions do have som known problems with direct proxies, but NGN provides a wrapper function\naround regular expressions, which makes them behave as expected.</p>\n\n<p><strong>Date Gotchas:</strong> Update methods don't work.</p>\n\n<p>Dates are one of the more complex JavaScript data objects and are not supported very well in any direct proxy\nimplementation. NGN wraps dates to provide change management. For example, setting an attribute value to\na date or deleting the attribute is not a problem. However; direct proxy support for date methods\ndoes not exist yet. For example, the following JavaScript should work, but will fail:</p>\n\n<pre><code>var person = new <a href=\"#!/api/NGN.model.Person\" rel=\"NGN.model.Person\" class=\"docClass\">NGN.model.Person</a>();\n\nperson.dob = new Date(1980,1,1);\nperson.dob.setFullYear(1979);\n</code></pre>\n\n<p>The example is contrived, but one would expect this to update the birth date to 1/1/1979. However,\nthis does not work with direct proxies, and therefore fails with NGN models.</p>\n\n<p><em>Workaround:</em></p>\n\n<p>To work around this issue, it is best to use a standard variable to do all date maniulations. The\nprior example could be modified to:</p>\n\n<pre><code>var person = new <a href=\"#!/api/NGN.model.Person\" rel=\"NGN.model.Person\" class=\"docClass\">NGN.model.Person</a>();\n\nperson.dob = new Date(1980,1,1); // &lt;-- Triggers the create event\n\n// Workaround\nvar modifiedDate = person.dob;\nmodifiedDate.setFullYear(1979);\n\nperson.dob = modifiedDate; // &lt;-- Triggers the change event\n</code></pre>\n\n<p>The net effect of this code will create the birth date of 1/1/1980, then fire a <code>change</code>/<code>changeDob</code> event\nwhen the date is set to 1/1/1979.</p>\n\n<h2 id='model_overview-section-4'>Data Validation</h2>\n\n<p>Models support data validation using the #addValidator method. There are several built in validation\nutilities, including basic matching (i.e. String == String), Regular Expression pattern matching, enumeration,\nand custom validation functions.</p>\n\n<h2 id='model_overview-section-5'>Associations: Related Models</h2>\n\n<p>Sometimes a model needs to contain nested models as properties of it's own. For example, a <code>Group</code> may contain\nmultiple <code>Person</code> models. NGN identifies relationship between models through associations (<a href=\"#!/api/NGN.model.data.Association\" rel=\"NGN.model.data.Association\" class=\"docClass\">NGN.model.data.Association</a>).</p>\n\n<p>Assocations allow developers to provide relationship rules, such as cardinality and referential integrity. If these\nterms sound like relational database speak, that's because it is. Since many applications maintain relationships\nbetween different entities, NGN has employed a type of modeling capable of enforcing these associations. This does\nnot mean an application must use a relational database. NGN natively supports several NoSQL data stores.</p>\n\n<p>For information about using associations, please see the related guide.</p>\n\n<h2 id='model_overview-section-6'>Models &amp; Data Storage</h2>\n\n<p>Due to the nature of models and their capability to validate data, manage associations, and monitor data/state change,\nthey act as a simplified variation of <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\">ORM</a>. Developers can choose\nto use associations or not, leaving the choice of \"to ORM or not to ORM\" up to the developer.</p>\n\n<p>//TODO: Complete this when the data manager class is complete and the extended class for mongo.</p>\n","title":"Model Overview"});