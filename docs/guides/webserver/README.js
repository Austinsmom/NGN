Ext.data.JsonP.webserver({"guide":"<h1>Web Server Fundamentals</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/webserver-section-1'>The Most Basic Server</a></li>\n<li><a href='#!/guide/webserver-section-2'>Routing</a></li>\n</ol>\n</div>\n\n<p>The web server is based on <a href=\"http://expressjs.com\">express</a>(v3.0).\nExpress, which works on <a href=\"http://senchalabs.github/com/connect\">Connect</a> is the most widely used web server framework in\nthe node community. Express can be used independently or with NGN objects, but NGN strives to\nsimplify many of the common boilerplate configurations of Express. Furthermore, NGN.web.Sever acts as a\nconsistent API interface, should it be necessary to switch to an alternative web server.</p>\n\n<p>The remainder of this guide is dedicated to both basic and advanced use of the <a href=\"#!/api/NGN.web.Server\" rel=\"NGN.web.Server\" class=\"docClass\">NGN.web.Server</a>.</p>\n\n<h2 id='webserver-section-1'>The Most Basic Server</h2>\n\n<p>The most basic web server can be used like</p>\n\n<pre><code>var server = new <a href=\"#!/api/NGN.web.Server\" rel=\"NGN.web.Server\" class=\"docClass\">NGN.web.Server</a>();\n</code></pre>\n\n<p>This will launch a <code>localhost</code> server on port <code>80</code>. Since no routes are specified,\nthe server generates a test route for developers to verify the server is actually running.</p>\n\n<p>By pointing a browser to <code>http://localhost</code> with the aforementioned setup, the browser will display</p>\n\n<p> <code>The web server works, but no routes have been configured.</code></p>\n\n<p>Of course, this on its own isn't useful beyond testing. The real power of an NGN web server\nappears in the configuration. Since it is based on Express, it has all of the features of Express,\nplus several others. These features include:</p>\n\n<ul>\n<li>Simpler Configuration</li>\n<li>Route File Structure</li>\n<li>Automatic Route Loading</li>\n<li>Expanded Route Controls, like renderIfExists()</li>\n<li><a href=\"#!/api/NGN.datasource.Connection\" rel=\"NGN.datasource.Connection\" class=\"docClass\">NGN.datasource.Connection</a>-based Persistent Sessions.</li>\n<li>More Template Renderers</li>\n<li>OAuth Integration</li>\n</ul>\n\n\n<h2 id='webserver-section-2'>Routing</h2>\n\n<p>Most web servers utilize routes to process requests and dynamic views.\nTypically, routes also manage static assets like images, CSS, etc. NGN\nsupports both static and dynamic routing by providing a file management\nstructure around express.</p>\n\n<p>Take the following server:</p>\n\n<pre><code>var server = new <a href=\"#!/api/NGN.web.Server\" rel=\"NGN.web.Server\" class=\"docClass\">NGN.web.Server</a>({\n    port:       81,\n    assets:     '/path/to/static/files',\n    views:      '/path/to/templates',\n    viewEngine: 'jade',\n    routes:     '/path/to/routes'\n});\n</code></pre>\n\n<p>There is a lot going on here. First, the server will be automatically started on port <code>81</code>,\nmeaning it is accessible at <code>http://localhost:81</code>.</p>\n\n<h3>Static Files</h3>\n\n<p>NGN looks for static files on the path\nconfigured in the <code>assets</code> directory, or <code>/path/to/static/files</code>. NGN, like express, will\nlook in this directory when it receives a request for a URL it does not have a route associated with.\nFor example, a request to <code>http://localhost:81/images/logo.png</code> would look for\n<code>/path/to/static/files/images/logo.png</code>.</p>\n\n<h3>Routes</h3>\n\n<p>NGN supports a simple and straightforward way to define any number of routes.\nWhen the web server is started, it will recursively parse the <code>routes</code> directory\nin an effort to find and load all routes for your application. In this sample,\nit will look for all <code>.js</code> files in <code>/path/to/routes</code> with the assumption\nthat this directory <em>only contains route controllers</em>.</p>\n\n<p><strong>Route Controllers</strong></p>\n\n<p>A route controller is specially structured file that works similarly to express routing.</p>\n\n<p><em>example:</em></p>\n\n<pre><code> module.exports = {\n    '/test': {                          // #1\n        '/more': {                      // #2\n            get: function(){\n                res.write('Testing more nested routes');\n                res.end();\n            }\n        },\n        get: function(req,res){\n            res.write('Basic Test');\n            res.end();\n        }\n    },\n    '/^\\/([a-zA-Z0-9_\\.~-]+)\\/(.*)/': {  // #3\n        get: function(){\n            res.end('Yo!');\n        }\n    },\n    '/': {                               // #4\n        get: function(){\n            res.end('Hello. I am root.');\n        }\n    }\n}\n</code></pre>\n\n<p>The example above contains several different routes for the following URL's:</p>\n\n<ul>\n<li><code>GET</code> http://localhost:81 (#4)</li>\n<li><code>GET</code> http://localhost:81/test (#1)</li>\n<li><code>GET</code> http://localhost:81/test/more (#2)</li>\n<li><code>GET</code> http://localhost:81/foo/bar/juice (#3)</li>\n<li><code>GET</code> http://localhost:81/whatever/path (#3)</li>\n</ul>\n\n\n<p>As the example indicates, it is possible to nest route paths for readability.\nThis is not a requirement, but may make some code easier to maintain. NGN has a built\nin mapper to automatically generate these routes.</p>\n\n<p>The example leads with <code>module.exports = {...}</code>, which is a common node package construct.\nThis must be included in each route file so node can load it properly.</p>\n\n<p>Notice the inherited object <code>res</code> in each of the <code>get</code> functions, which is not explicitly passed as an argument.\nIf you're used to using express, you may remember a different syntax more like:</p>\n\n<pre><code>app.get('/',function(req,res,next){\n    ...\n    res.render('mytemplate');\n});\n</code></pre>\n\n<p>Notice <em>route #3</em> is a {RegExp}. Since a RegExp is an object iteself, it cannot be used as\na property of an object. Therefore, regular expressions are wrapped in quotes. NGN\nautomatically detects them by finding a beginning and trailing <code>/</code> in the route, which\nis automatically converted to a {RegExp} object.</p>\n\n<p>NGN wraps express routing methods and provides some sugar syntax to make the code simpler to read,\nless to type, and (hopefully) friendlier overall. However; the wrapper supports the same express syntax\nfor those who wish to continue using it. There are several additional inherited variables made available\nto route methods (regardless of the syntax you choose). These include:</p>\n\n<ul>\n<li><strong>res/response:</strong> The raw <code>response</code> object. This is the same object typically passed in app.get('/',function(<strong>req</strong>,req, next){}).</li>\n<li><strong>req/request:</strong> The raw <code>request</code> object. This is the same object typically passed in app.get('/',function(req, <strong>res</strong>, next){}).</li>\n<li><strong>next:</strong> The <code>next</code> method. This is the same method typically passed in app.get('/',function(req, res, <strong>next</strong>){}).</li>\n<li><strong>url:</strong> A key/value object containing any URL parameters. For example, <code>http://localhost/?hello=world</code> would be the same as <code>url = {hello:\"world\"}</code>.</li>\n<li><strong>session:</strong> A reference to <code>req.session</code>.</li>\n<li><strong>form</strong>: A key/value object containing any <form> attributes POSTed to the URL. This is a blank object if no form attributes are submitted.</li>\n<li><strong>cgi:</strong> A key/value object containing different CGI attributes, including <code>headers</code>, <code>isMobileDevice</code>, <code>path_info</code>, <code>user_agent</code>, <code>method</code>, and <code>http_accept</code>. This list will likely grow over time, as additional values are needed.</li>\n</ul>\n\n\n<p>All of the common routing methods are available, including:</p>\n\n<ul>\n<li><code>get</code></li>\n<li><code>put</code></li>\n<li><code>post</code></li>\n<li><code>del</code> (used instead of <code>delete</code>, which is a reserved word in JavaScript)</li>\n<li><code>head</code></li>\n</ul>\n\n\n<h3>Dynamic Views &amp; Templates</h3>\n\n<p>NGN automatically extends the local variables sent to templates.</p>\n\n<ul>\n<li><strong>session</strong> {Object} This contains whatever is stored in the session.</li>\n<li><strong>application</strong> {Object} This object is accessible to the entire running process.</li>\n<li><strong>url</strong> {Object} This is a key/value object of all URL query parameters sent in the request.</li>\n<li><p><strong>browser</strong> {Object}\nThe <em>browser</em> object is structured like:</p>\n\n<pre><code>  {\n      name: 'Safari 5.0.1',\n      version: '5.0.1',\n      family: 'Safari,\n      major: 5,\n      minor: 0,\n      patch: 1,\n      mobile: false\n  }\n</code></pre></li>\n</ul>\n\n\n<p>CSRF protection is enabled by default when session management is enabled. A <code>local</code> variable is available called <code>csrf_input_field</code>,\nwhich generates a CSRF token and makes the HTML code available for insertion into a template. The code injected looks like</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"_csrf\" value=\"&lt;generated-token&gt;\"/&gt;\n</code></pre>\n\n<h3>Caching Dynamic Templates</h3>\n\n<p>The NGN web server uses (consolidate)[https://github.com/visionmedia/consolidate.js] to support\nmultiple different template rendering engines. Each of the consolidate engines supports\ncaching at the route level. By default, caching is not enabled.</p>\n\n<p>To enable caching for a specific URI route, the <code>cache:true</code> parameter should be passed as an option\nwhen the template is rendered. For example:</p>\n\n<pre><code>server.get('/my/path',function(req,res){\n    res.render('index',{pagetitle:'Welcome',cache:true},function(err,html){\n        if (err) throw err;\n        console.log('Generated HTML:',html);\n    });\n}); \n</code></pre>\n\n<p>When the first request to http://mydomain.com/my/path is received, the template will\nbe rendered and stored in memory (RAM). All subsequent requests to this URL will\nrender the cached content.</p>\n","title":"NEEDS UPDATE Web Server Fundamentals"});