Ext.data.JsonP.NGNA({"subclasses":[],"meta":{},"linenr":2,"inheritdoc":null,"enum":null,"uses":["NGN.app.Application"],"aliases":{},"requires":["NGN.app.Application"],"component":false,"inheritable":null,"override":null,"extends":null,"mixedInto":[],"alternateClassNames":[],"members":{"css_mixin":[],"method":[],"cfg":[],"property":[],"css_var":[],"event":[]},"superclasses":[],"private":null,"singleton":true,"tagname":"class","statics":{"css_mixin":[],"cfg":[],"method":[],"property":[],"css_var":[],"event":[]},"parentMixins":[],"name":"NGNA","html":"<div><pre class=\"hierarchy\"><h4>Requires</h4><div class='dependency'><a href='#!/api/NGN.app.Application' rel='NGN.app.Application' class='docClass'>NGN.app.Application</a></div><h4>Uses</h4><div class='dependency'><a href='#!/api/NGN.app.Application' rel='NGN.app.Application' class='docClass'>NGN.app.Application</a></div><h4>Files</h4><div class='dependency'><a href='source/Application.html#NGNA' target='_blank'>Application.js</a></div></pre><div class='doc-contents'><p>NGNA is a global convenience pointer to the application scope. It is only created when an\napplication is created, either by manuall creating a new <a href=\"#!/api/NGN.app.Application\" rel=\"NGN.app.Application\" class=\"docClass\">NGN.app.Application</a>\nor invoking it with <a href=\"#!/api/NGN-property-app\" rel=\"NGN-property-app\" class=\"docClass\">NGN.app</a>.</p>\n\n<p><strong>Example Use</strong></p>\n\n<p>If the application is created in a file, say <code>app.js</code> as:</p>\n\n<pre><code>    <a href=\"#!/api/NGN-method-application\" rel=\"NGN-method-application\" class=\"docClass\">NGN.application</a>(function(){\n        var ds = new <a href=\"#!/api/NGN.datasource.Redis\" rel=\"NGN.datasource.Redis\" class=\"docClass\">NGN.datasource.Redis</a>({id:'myredis'});\n        ...\n    });\n</code></pre>\n\n<p>Any other file (web server route, API call, etc) would normally be able to\nreference the the data source <code>NGN.app.getDSN('myredis')</code>. However; it is also accessible\nvia shorthand using <code>NGNA</code> or <code>ngna</code>.</p>\n\n<pre><code>    NGNA.getDSN('myredis');\n</code></pre>\n\n<p>This is purely syntactic sugar, designed to reduce the overall amount of typing required\nto access the application scope.</p>\n</div><div class='members'></div></div>","mixins":[],"id":"class-NGNA","html_meta":{},"files":[{"href":"Application.html#NGNA","filename":"Application.js"}]});