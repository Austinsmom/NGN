#!/usr/bin/env node

var argv = require('optimist')
			.alias('config','configuration')
			.alias('out','output')
			.argv,
	p 	 = require('path'),
	cwd	 = process.cwd(),
	root = p.dirname(process.mainModule.filename);

require('colors');

/**
 * Statics 
 */
var CREATE 			= argv['create'] || null,
	PUBLISH			= argv['publish'] || null,
	CFG				= argv['configuration'] || p.join(process.cwd(),'ngn.config.json'),
	OUT_DIR			= argv['output'] || p.join(cwd,'docs','manual'),
	HELP			= argv['help'] || argv['h'] || null,
	RUN				= argv._[0] || null;

// Create things
if (CREATE) {
	RUN = null;
	switch(CREATE.toLowerCase()) {
		case null:
			break;
		case 'docs':
		case 'doc':
		case 'documentation':
			console.log('Documentation Generator'.cyan.underline);
			var dg = require('./lib/docBuilder')
			dg.build(argv);
			break;
		case 'class':
			console.log('Class Creation Wizard'.cyan.underline);
			var cls = require('./lib/classBuilder');
			cls.wizard();
			break;
		case 'api':
			console.log('Custom API Creation Wizard.'.cyan.underline);
			var api = require('./lib/apiBuilder');
			api.wizard();
			break;
		default:
			console.log(CREATE+' not recognized.');
	}
}

// Publish to an npm registry
if (PUBLISH){
	
	RUN = null;

	try {
		var cfg			= require('./config.json');
	} catch(e) {
		var cfg 		= {};
	}
	console.log('Publishing to npm Registry'.green);
	console.log(' >> Packaging...'.grey);
	
	var publicRegistry = ''//'http://registry.npmjs.org';
	var registry = cfg.npmregistry || publicRegistry;
	
	var pkg = require('../package.json');
	var v   = pkg.version || '0.0.0';
		
	var cmd = 'npm --registry '+registry+' publish';
	var cmd2= 'npm --registry '+registry+' tag '+pkg.name+'@'+v+' latest';

	console.log(' >> Publishing...'.grey);
	console.log('    + '.grey+cmd.blue);
	exec(cmd,{cwd:__dirname+'/../'},function(error, stdout, stderr){
		console.log(' >> Tagging Release...'.grey);
		console.log('    + '.grey+cmd2.blue);
		exec(cmd2,{cwd:__dirname+'/../'},function(e,so,se){
			console.log('Published as '.green.bold+pkg.name.green.bold.underline+' v'.green.underline+v.green.bold.underline);
		});
	});
}

if (RUN) {
	var exec = require('child_process').spawn;
	console.log(('Launching '+RUN+' with limited ES6 support...').grey);
	var shell = exec("node",['--harmony_proxies',RUN],{ 
			cwd: process.cwd,
			stdio: ['pipe', 'pipe', process.stdout]
		});
	
	/*shell.stderr.on('data',function(data){
		console.log(data);
	});*/
	
	//shell.stdout.on('')
}