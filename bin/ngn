#!/usr/bin/env node

var argv = require('optimist')
			.alias('config','configuration')
			.alias('out','output')
			.argv,
	fs	 = require('fs'),
	eyes = require('eyes'),
	dir	 = require('wrench');
	exec = require('child_process').exec;

require('colors');

/**
 * Statics 
 */
var CREATE 			= argv['create'] || null,
	PUBLISH			= argv['publish'] || null,
	CFG				= argv['configuration'] || 'ngn.config.json',
	OUT_DIR			= argv['output'] || __dirname+'/../docs/manual';
	
try {
	var cfg			= require('./config.json');
} catch(e) {
	var cfg 		= {};
}

// Create things
if (CREATE) {
	switch(CREATE.toLowerCase()) {
		case null:
			break;
		case 'docs':
		case 'doc':
		case 'documentation':
			console.log('Generating documentation '.cyan+' at '.cyan+OUT_DIR.toString().trim().cyan.bold+':'.cyan);
			generateDocumentation();
			break;
		default:
			console.log(CREATE+' not recognized.');
	}
}

// Publish to an npm registry
if (PUBLISH){
	console.log('Publishing to npm Registry'.green);
	console.log(' >> Packaging...'.grey);
	
	var publicRegistry = ''//'http://registry.npmjs.org';
	var registry = cfg.npmregistry || publicRegistry;
	
	var pkg = require('../package.json');
	var v   = pkg.version || '0.0.0';
		
	var cmd = 'npm --registry '+registry+' publish';
	var cmd2= 'npm --registry '+registry+' tag '+pkg.name+'@'+v+' latest';

	console.log(' >> Publishing...'.grey);
	console.log('    + '.grey+cmd.blue);
	exec(cmd,{cwd:__dirname+'/../'},function(error, stdout, stderr){
		console.log(' >> Tagging Release...'.grey);
		console.log('    + '.grey+cmd2.blue);
		exec(cmd2,{cwd:__dirname+'/../'},function(e,so,se){
			console.log('Published as '.green.bold+pkg.name.green.bold.underline+' v'.green.underline+v.green.bold.underline);
		});
	});
}

// Generate docs
function generateDocumentation() {
	
	var p = require('path');
	
	console.log(' >> Cleaning up existing docs...'.grey);
	dir.rmdirSyncRecursive(OUT_DIR.toString().trim(), true);
	
	console.log(' >> Checking configuration...'.grey);
	
	var root = p.dirname(process.mainModule.filename);

	if(p.basename(process.mainModule.filename == 'ngn'))
		root = p.join(root,'../');

	CFG = CFG == 'ngn.config.json' ? p.join(root,CFG) : CFG;
	
	if (fs.existsSync(CFG)){
		var ngncfg = require(CFG);
		var jsdcfg = require(p.join(root,ngncfg.docsource,'config.json'));
			
		if (ngncfg.extensions !== undefined){
			if (jsdcfg['--'] == undefined)
				jsdcfg['--'] = [];
			jsdcfg['--'] = jsdcfg['--'].concat(ngncfg.extensions);
			for (var i=0;i<jsdcfg['--'].length;i++){
				if (fs.existsSync(p.join(root,jsdcfg['--'][i])))
					jsdcfg['--'][i] = p.join(root,jsdcfg['--'][i]);
				else if (fs.existsSync(p.join(__dirname,jsdcfg['--'][i])))
					jsdcfg['--'][i] = p.join(__dirname,jsdcfg['--'][i]);
				
				console.log(jsdcfg['--'][i],fs.existsSync(jsdcfg['--'][i]));
			}
		}
	} else {
		console.log('Missing Configuration!'.red.bold);
		console.log(CFG.red.underline+' could not be found.'.red);
		return;
	}
	
	var docs = p.join(root,ngncfg.docsource||'./docs/src');
	
	// Create a temp config file for processing the request
	if (ngncfg.extensions !== undefined){
		if (ngncfg.extensions.length > 0){
			CFG = docs+'/.ngn.tmp.json';
			fs.writeFileSync(CFG,JSON.stringify(jsdcfg,null,4));
		}
	}
	
	var cmd = 'jsduck --builtin-classes'+(CFG.trim().length>0?' --config '+CFG:'')+' --output "'+p.resolve(OUT_DIR)+'"';
	
	console.log(' >> Building docs...'.grey);
	
	if (argv['showcmd']){
		console.log('-----------------------------------------------------'.grey.bold);
		console.log(cmd.grey);
		console.log('-----------------------------------------------------'.grey.bold);
	}
	
	var child = exec(cmd,{
				 	cwd: docs
				}, function(error,sout,serr){
					fs.exists(p.join(docs,'.ngn.tmp.json'),function(exists){
						if (exists){
							/*fs.unlink(__dirname+'/.ngn.tmp.json',function(err){
								if (error) {
									console.log('ERROR'.bold.red);
									eyes.inspect(error);
							 	} else
									console.log('DONE'.bold.green);
							});*/
							if (error) {
									console.log('ERROR'.bold.red);
									eyes.inspect(error);
							 	} else
									console.log('DONE'.bold.green);
						} else {
							if (error) {
								console.log('ERROR'.bold.red);
								eyes.inspect(error);
						 	} else
								console.log('DONE'.bold.green);
						}
						
					});
				});
}