#!/usr/bin/env node

var argv = require('optimist')
			.alias('config','configuration')
			.alias('out','output')
			.argv,
	fs	 = require('fs'),
	eyes = require('eyes'),
	dir	 = require('wrench');
	exec = require('child_process').exec;

require('colors');

/**
 * Statics 
 */
var CREATE 			= argv['create'] || null,
	PUBLISH			= argv['publish'] || null,
	CFG				= argv['configuration'] || 'config.json',
	OUT_DIR			= argv['output'] || __dirname+'/../docs/manual';
	
try {
	var cfg			= require('./config.json');
} catch(e) {
	var cfg 		= {};
}

// Create things
if (CREATE !== null) {
	switch(CREATE.toLowerCase()) {
		case null:
			break;
		case 'docs':
		case 'doc':
		case 'documentation':
			console.log('Generating documentation '.cyan+' at '.cyan+OUT_DIR.toString().trim().cyan.bold+':'.cyan);
			generateDocumentation();
			break;
		default:
			console.log(CREATE+' not recognized.');
	}
}

// Publish to an npm registry
if (PUBLISH !== null){
	console.log('Publishing to npm Registry'.green);
	console.log(' >> Packaging...'.grey);
	
	var publicRegistry = 'http://registry.npmjs.org';
	var registry = cfg.npmregistry || publicRegistry;
	
	var pkg = require('../package.json');
	var v   = pkg.version || '0.0.0';
		
	var cmd = 'npm --registry '+registry+' publish --force';
	var cmd2= 'npm --registry '+registry+' tag '+pkg.name+'@'+v+' latest';

	console.log(' >> Publishing...'.grey);
	console.log('    + '.grey+cmd.blue);
	exec(cmd,{cwd:__dirname+'/../'},function(error, stdout, stderr){
		console.log(' >> Tagging Release...'.grey);
		console.log('    + '.grey+cmd2.blue);
		exec(cmd2,{cwd:__dirname+'/../'},function(e,so,se){
			console.log('Published as '.green.bold+pkg.name.green.bold.underline+' v'.green.underline+v.green.bold.underline);
		});
	});
}

// Generate docs
function generateDocumentation() {
	
	console.log(' >> Cleaning up existing docs...'.grey);
	dir.rmdirSyncRecursive(OUT_DIR.toString().trim(), true);
	
	console.log(' >> Checking configuration...'.grey);
	
	var root = process.mainModule.filename.replace(/\\/gi,'/');
	root = root.replace('/'+root.split('/')[root.split('/').length-1],'');

	/*
	CFG = CFG == 'config.json' ? root+'/'+CFG : CFG;
	console.log(root+'/ngn.config.json',CFG);	
		
		if (fs.existsSync(process.cwd()+'/ngn.config.json') && fs.existsSync(CFG)) {
			var ngncfg = require(process.cwd()+'/ngn.config.json'),
				jsdcfg = require(CFG);
	console.log(ngncfg,jsdcfg)		
			// Make sure there are extensions to add
			if (ngncfg.extensions !== undefined){
				if (ngn.extensions.length > 0) {
					if (jsdcfg['--'] == undefined) {
						console.log(' >> Updating configuration...'.grey);
						jsdcfg['--'] = ngncfg.extensions
					} else {
						var edit = false;
						for(var i=0;i<ngncfg.extensions.length;i++){
							if (jsdcfg['--'].indexOf(ngncfg.extensions[i]) >= 0){
								jsdcfg['--'].push(ngncfg.extensions[i]);
								edit = true;
							}
						}
						if (edit) {
							console.log(' >> Updating configuration...'.grey);
							fs.writeFileSync(CFG,JSON.stringify(jsdcfg));
						}
					}
				}
			}
		}*/
	
	
	var cmd = 'jsduck --builtin-classes'+(CFG.trim().length>0?' --config '+CFG:'')+' --output "'+OUT_DIR+'"';
	
	console.log(' >> Building docs...'.grey);
	var child = exec(cmd,{
				 	cwd: __dirname+'/../docs/src'
				}, function(error,out,err){
					if (error) {
						console.log('ERROR'.bold.red);
						eyes.inspect(error);
				 	} else
						console.log('DONE'.bold.green);
				});
}